class <%= class_name %> < Stall::Shipping::Calculator
  # Use this method to handle the related shipping method availibility depending
  # on the cart data available to the calculator
  #
  def available?
    true
  end

  # Write your logic here and return the price for the current cart
  #
  # You can access `cart` and `shipping_method` (the model) here.
  #
  def price
    0
  end

  # Allows you to override how calculator's eot_price price is calculated
  #
  # def eot_price
  #   price / (1 + (vat_rate / 100.0))
  # end

  # Allows you to override the VAT for the calculator which allows calculating
  # the EOT price
  #
  # def vat_rate
  #   Stall.config.vat_rate
  # end

  # Allow shipping notification e-mails to embed a tracking URL for the shipping
  # method, and when the `Shipment#tracking_code` is filled for the cart.
  #
  # Note : If you make a shipping method trackable, don't forget to define the
  #        #tracking_url method below
  #
  # def trackable?
  #   true
  # end

  # Return a URL that will be given to the customer when notified of the
  # shipping of its order
  #
  # def tracking_url
  #   if (tracking_code = cart.shipment.try(:tracking_code)).present?
  #     "http://www.my-shipping-service.com/tracking/url?code=#{ tracking_code }"
  #   end
  # end
end
